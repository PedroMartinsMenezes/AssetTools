using static AssetTool.UEdGraphPin;

namespace AssetTool
{
    [Location("UEdGraphPin::Serialize(FArchive& Ar)")]
    public class UEdGraphPin : UObject
    {
        public const string TypeName = "EdGraphPin";

        #region Part 1
        public FBool bNullPtr;
        public TRef LocalOwningNode;
        public FGuid PinGuid;
        #endregion

        #region Part 2
        public TRef OwningNode;
        public FGuid PinId;
        public FName PinName;
        public FText PinFriendlyName;
        public Int32 SourceIndex;
        public FString PinToolTip;
        public byte Direction;

        public FEdGraphPinType PinType;

        public FString DefaultValue;
        public FString AutogeneratedDefaultValue;
        public UInt32 DefaultObject;
        public FText DefaultTextValue;

        public List<UEdGraphPin> LinkedTo;
        public List<UEdGraphPin> SubPins;

        public UEdGraphPin ParentPin;
        public UEdGraphPin ReferencePassThroughConnection;

        public FGuid PersistentGuid;
        public UInt32 BitField;
        #endregion

        public enum EPinResolveType
        {
            OwningNode,
            LinkedTo,
            SubPins,
            ParentPin,
            ReferencePassThroughConnection
        };
    }

    public static class UEdGraphPinExt
    {
        [Location("bool UEdGraphPin::Serialize(FArchive& Ar)")]
        public static UEdGraphPin ReadPart2(this BinaryReader reader, UEdGraphPin item)
        {
            reader.Read(ref item.OwningNode);
            reader.Read(ref item.PinId);

            if (Supports.CustomVer(FFrameworkObjectVersion.Enums.PinsStoreFName))
                reader.Read(ref item.PinName);
            else
                item.PinName = new FName(reader.ReadFString().Value);

            reader.Read(ref item.PinFriendlyName);

            if (Supports.CustomVer(FUE5MainStreamObjectVersion.Enums.EdGraphPinSourceIndex))
                reader.Read(ref item.SourceIndex);

            reader.Read(ref item.PinToolTip);
            reader.Read(ref item.Direction);

            reader.Read(ref item.PinType);

            reader.Read(ref item.DefaultValue);
            reader.Read(ref item.AutogeneratedDefaultValue);
            reader.Read(ref item.DefaultObject);
            reader.Read(ref item.DefaultTextValue);

            reader.ReadList(ref item.LinkedTo, EPinResolveType.LinkedTo);
            reader.ReadList(ref item.SubPins, EPinResolveType.SubPins);

            reader.ReadPart1(ref item.ParentPin, EPinResolveType.ParentPin);
            reader.ReadPart1(ref item.ReferencePassThroughConnection, EPinResolveType.ReferencePassThroughConnection);

            reader.Read(ref item.PersistentGuid);
            reader.Read(ref item.BitField);

            return item;
        }

        [Location("bool UEdGraphPin::Serialize(FArchive& Ar)")]
        public static void WritePart2(this BinaryWriter writer, UEdGraphPin item)
        {
            writer.Write(item.OwningNode);
            writer.Write(item.PinId);

            if (Supports.CustomVer(FFrameworkObjectVersion.Enums.PinsStoreFName))
                writer.Write(item.PinName);

            writer.Write(item.PinFriendlyName);

            if (Supports.CustomVer(FUE5MainStreamObjectVersion.Enums.EdGraphPinSourceIndex))
                writer.Write(item.SourceIndex);

            writer.Write(item.PinToolTip);
            writer.Write(item.Direction);

            writer.Write(item.PinType);

            writer.Write(item.DefaultValue);
            writer.Write(item.AutogeneratedDefaultValue);
            writer.Write(item.DefaultObject);
            writer.Write(item.DefaultTextValue);

            writer.WriteList(item.LinkedTo, EPinResolveType.LinkedTo);
            writer.WriteList(item.SubPins, EPinResolveType.SubPins);

            writer.WritePart1(item.ParentPin, EPinResolveType.ParentPin);
            writer.WritePart1(item.ReferencePassThroughConnection, EPinResolveType.ReferencePassThroughConnection);

            writer.Write(item.PersistentGuid);
            writer.Write(item.BitField);
        }

        public static void WritePart1(this BinaryWriter writer, UEdGraphPin item, EPinResolveType type)
        {
            writer.Write(item.bNullPtr);
            if (item.bNullPtr?.Value != true)
            {
                //bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)
                writer.Write(item.LocalOwningNode);
                writer.Write(item.PinGuid);
                if (type == EPinResolveType.OwningNode)
                    writer.WritePart2(item);
            }
        }

        public static void WriteList(this BinaryWriter writer, List<UEdGraphPin> list, EPinResolveType type)
        {
            list ??= new();
            writer.Write(list.Count);
            for (int i = 0; i < list.Count; i++)
            {
                writer.WritePart1(list[i], type);
            }
        }

        public static void ReadList(this BinaryReader reader, ref List<UEdGraphPin> list, EPinResolveType type)
        {
            list ??= new();
            int count = reader.ReadInt32();
            for (int i = 0; i < count; i++)
            {
                list.Add(reader.ReadPart1(new UEdGraphPin(), type));
            }
        }

        public static UEdGraphPin ReadPart1(this BinaryReader reader, ref UEdGraphPin item, EPinResolveType type)
        {
            item ??= new();
            return reader.ReadPart1(item, type);
        }

        [Location("bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)")]
        public static UEdGraphPin ReadPart1(this BinaryReader reader, UEdGraphPin item, EPinResolveType type)
        {
            reader.Read(ref item.bNullPtr);
            if (item.bNullPtr?.Value != true)
            {
                //bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)
                reader.Read(ref item.LocalOwningNode);
                reader.Read(ref item.PinGuid);
                if (type == EPinResolveType.OwningNode)
                    reader.ReadPart2(item);
            }
            return item;
        }
    }
}
