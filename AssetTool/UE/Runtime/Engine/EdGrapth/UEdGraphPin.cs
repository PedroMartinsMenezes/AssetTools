namespace AssetTool
{
    [Location("UEdGraphPin::Serialize(FArchive& Ar)")]
    [JsonAsset("EdGraphPin")]
    public class UEdGraphPin : UObject
    {
        public const string TypeName = "EdGraphPin";

        #region SerializePin
        public FBool bNullPtr;
        public TRef LocalOwningNode;
        public FGuid PinGuid;
        #endregion

        #region Part 2
        public TRef OwningNode;
        public FGuid PinId;
        public FName PinName;
        public FString PinNameStr;
        public FText PinFriendlyName;
        public Int32 SourceIndex;
        public FString PinToolTip;
        public byte Direction;

        public FEdGraphPinType PinType;

        public FString DefaultValue;
        public FString AutogeneratedDefaultValue;
        public UInt32 DefaultObject;
        public FText DefaultTextValue;

        public List<UEdGraphPin> LinkedTo;
        public List<UEdGraphPin> SubPins;

        public UEdGraphPin ParentPin;
        public UEdGraphPin ReferencePassThroughConnection;

        public FGuid PersistentGuid;
        public UInt32 BitField;
        #endregion

        public enum EPinResolveType
        {
            OwningNode,
            LinkedTo,
            SubPins,
            ParentPin,
            ReferencePassThroughConnection
        };

        [Location("void UEdGraphPin::SerializePinArray(FArchive& Ar, TArray<UEdGraphPin*>& ArrayRef, UEdGraphPin* RequestingPin, EPinResolveType ResolveType)")]
        public static void SerializePinArray(Transfer transfer, ref List<UEdGraphPin> ArrayRef, UEdGraphPin RequestingPin, EPinResolveType ResolveType)
        {
            ArrayRef ??= [];
            List<UEdGraphPin> OldPins = transfer.IsReading && ResolveType == UEdGraphPin.EPinResolveType.OwningNode ? ArrayRef.Select(x => x).ToList() : [];
            ArrayRef.Resize(transfer, true);
            for (int PinIdx = 0; PinIdx < ArrayRef.Count; PinIdx++)
            {
                ArrayRef[PinIdx] ??= new();
                UEdGraphPin PinRef = ArrayRef[PinIdx];
                SerializePin(transfer, ref PinRef, PinIdx, RequestingPin, ResolveType, OldPins);
            }
        }

        [Location("bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)")]
        public static void SerializePin(Transfer transfer, ref UEdGraphPin PinRef, int ArrayIdx, UEdGraphPin RequestingPin, EPinResolveType ResolveType, List<UEdGraphPin> OldPins)
        {
            transfer.Move(ref PinRef.bNullPtr);
            if (PinRef.bNullPtr?.Value != true)
            {
                //if (!transfer.IsReading)
                //{
                //    PinRef.PinGuid = PinRef.PinId;
                //}

                PinRef.LocalOwningNode ??= new();
                PinRef.LocalOwningNode.Move(transfer);
                transfer.Move(ref PinRef.PinGuid);

                //if (ResolveType == EPinResolveType.LinkedTo && transfer.IsReading && PinRef.LocalOwningNode == null)
                //
                //PinRef = null;

                if (ResolveType == EPinResolveType.OwningNode)
                {

                    //if (transfer.IsReading)
                    //{
                    //    var guid = PinRef!.PinGuid.Value;
                    //    UEdGraphPin PinToReuse = OldPins.Find(Pin => Pin is { } && Pin.PinId.Value == guid);
                    //    if (PinToReuse is { })
                    //    {
                    //        PinRef = PinToReuse;
                    //    }
                    //}
                    PinRef.Serialize(transfer);
                }
            }
        }

        [Location("bool UEdGraphPin::Serialize(FArchive& Ar)")]
        private UEdGraphPin Serialize(Transfer transfer)
        {
            OwningNode ??= new();
            OwningNode.Move(transfer);
            transfer.Move(ref PinId);

            if (Supports.CustomVer(FFrameworkObjectVersion.Enums.PinsStoreFName))
                transfer.Move(ref PinName);
            else
                transfer.Move(ref PinNameStr);

            transfer.Move(ref PinFriendlyName);

            if (Supports.CustomVer(FUE5MainStreamObjectVersion.Enums.EdGraphPinSourceIndex))
                transfer.Move(ref SourceIndex);

            transfer.Move(ref PinToolTip);
            transfer.Move(ref Direction);

            PinType ??= new();
            PinType.Move(transfer);

            transfer.Move(ref DefaultValue);
            transfer.Move(ref AutogeneratedDefaultValue);
            transfer.Move(ref DefaultObject);
            transfer.Move(ref DefaultTextValue);

            UEdGraphPin.SerializePinArray(transfer, ref LinkedTo, this, EPinResolveType.LinkedTo);

            UEdGraphPin.SerializePinArray(transfer, ref SubPins, this, EPinResolveType.SubPins);

            ParentPin ??= new();
            SerializePin(transfer, ref ParentPin, -1, this, EPinResolveType.ParentPin, []);

            ReferencePassThroughConnection ??= new();
            SerializePin(transfer, ref ReferencePassThroughConnection, -1, this, EPinResolveType.ReferencePassThroughConnection, []);

            transfer.Move(ref PersistentGuid);
            transfer.Move(ref BitField);

            return this;
        }
    }
}
