namespace AssetTool
{
    [Location("UEdGraphPin::Serialize(FArchive& Ar)")]
    public class UEdGraphPin : UObject
    {
        public const string TypeName = "EdGraphPin";

        #region Part 1
        public FBool bNullPtr;
        public TRef LocalOwningNode;
        public FGuid PinGuid;
        #endregion

        #region Part 2
        public TRef OwningNode;
        public FGuid PinId;
        public FName PinName;
        public FText PinFriendlyName;
        public Int32 SourceIndex;
        public FString PinToolTip;
        public byte Direction;

        public FEdGraphPinType PinType;

        public FString DefaultValue;
        public FString AutogeneratedDefaultValue;
        public UInt32 DefaultObject;
        public FText DefaultTextValue;

        public List<UEdGraphPin> LinkedTo;
        public List<UEdGraphPin> SubPins;

        public UEdGraphPin ParentPin;
        public UEdGraphPin ReferencePassThroughConnection;

        public FGuid PersistentGuid;
        public UInt32 BitField;
        #endregion

        public enum EPinResolveType
        {
            OwningNode,
            LinkedTo,
            SubPins,
            ParentPin,
            ReferencePassThroughConnection
        };

        [Location("bool UEdGraphPin::Serialize(FArchive& Ar)")]
        public UEdGraphPin ReadPart2(BinaryReader reader)
        {
            OwningNode = new();
            OwningNode.Read(reader);
            reader.Read(ref PinId);

            if (Supports.CustomVer(FFrameworkObjectVersion.Enums.PinsStoreFName))
                reader.Read(ref PinName);
            else
                PinName = new FName(reader.ReadFString().Value);

            reader.Read(ref PinFriendlyName);

            if (Supports.CustomVer(FUE5MainStreamObjectVersion.Enums.EdGraphPinSourceIndex))
                reader.Read(ref SourceIndex);

            reader.Read(ref PinToolTip);
            reader.Read(ref Direction);

            PinType = new();
            PinType.Read(reader);

            reader.Read(ref DefaultValue);
            reader.Read(ref AutogeneratedDefaultValue);
            reader.Read(ref DefaultObject);
            reader.Read(ref DefaultTextValue);

            LinkedTo = [];
            LinkedTo.Resize(reader.ReadInt32());
            LinkedTo.ForEach(x => x.ReadPart1(reader, EPinResolveType.LinkedTo));

            SubPins = [];
            SubPins.Resize(reader.ReadInt32());
            SubPins.ForEach(x => x.ReadPart1(reader, EPinResolveType.SubPins));

            ParentPin = new();
            ParentPin.ReadPart1(reader, EPinResolveType.ParentPin);

            ReferencePassThroughConnection = new();
            ReferencePassThroughConnection.ReadPart1(reader, EPinResolveType.ReferencePassThroughConnection);

            reader.Read(ref PersistentGuid);
            reader.Read(ref BitField);

            return this;
        }

        [Location("bool UEdGraphPin::Serialize(FArchive& Ar)")]
        public void WritePart2(BinaryWriter writer)
        {
            OwningNode.Write(writer);
            writer.Write(PinId);

            if (Supports.CustomVer(FFrameworkObjectVersion.Enums.PinsStoreFName))
                writer.Write(PinName);

            writer.Write(PinFriendlyName);

            if (Supports.CustomVer(FUE5MainStreamObjectVersion.Enums.EdGraphPinSourceIndex))
                writer.Write(SourceIndex);

            writer.Write(PinToolTip);
            writer.Write(Direction);

            PinType.Write(writer);

            writer.Write(DefaultValue);
            writer.Write(AutogeneratedDefaultValue);
            writer.Write(DefaultObject);
            writer.Write(DefaultTextValue);

            writer.Write(LinkedTo.Count);
            LinkedTo.ForEach(x => x.WritePart1(writer, EPinResolveType.LinkedTo));

            writer.Write(SubPins.Count);
            SubPins.ForEach(x => x.WritePart1(writer, EPinResolveType.SubPins));

            ParentPin.WritePart1(writer, EPinResolveType.ParentPin);
            ReferencePassThroughConnection.WritePart1(writer, EPinResolveType.ReferencePassThroughConnection);

            writer.Write(PersistentGuid);
            writer.Write(BitField);
        }

        public void WritePart1(BinaryWriter writer, EPinResolveType type)
        {
            writer.Write(bNullPtr);
            if (bNullPtr?.Value != true)
            {
                //bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)
                LocalOwningNode.Write(writer);
                writer.Write(PinGuid);
                if (type == EPinResolveType.OwningNode)
                    WritePart2(writer);
            }
        }

        [Location("bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)")]
        public UEdGraphPin ReadPart1(BinaryReader reader, EPinResolveType type)
        {
            reader.Read(ref bNullPtr);
            if (bNullPtr?.Value != true)
            {
                //bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)
                LocalOwningNode = new();
                LocalOwningNode.Read(reader);
                reader.Read(ref PinGuid);
                if (type == EPinResolveType.OwningNode)
                    ReadPart2(reader);
            }
            return this;
        }
    }
}
