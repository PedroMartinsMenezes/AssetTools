using static AssetTool.UEdGraphPin;

namespace AssetTool
{
    [Location("UEdGraphPin::Serialize(FArchive& Ar)")]
    public class UEdGraphPin
    {
        public FBool bNullPtr;

        public TRef LocalOwningNode;
        public FGuid PinGuid;

        public TRef OwningNode;
        public FGuid PinId;
        public FName PinName;
        public FText PinFriendlyName;
        public Int32 SourceIndex;
        public FString PinToolTip;
        public byte Direction;

        public FEdGraphPinType PinType;

        public FString DefaultValue;
        public FString AutogeneratedDefaultValue;
        public UInt32 DefaultObject;
        public FText DefaultTextValue;

        public List<UEdGraphPin> LinkedTo;
        public List<UEdGraphPin> SubPins;

        public UEdGraphPin ParentPin; //4 bytes
        public UEdGraphPin ReferencePassThroughConnection; //4 bytes

        public FGuid PersistentGuid;
        public UInt32 BitField;

        public enum EPinResolveType
        {
            OwningNode,
            LinkedTo,
            SubPins,
            ParentPin,
            ReferencePassThroughConnection
        };
    }

    public static class UEdGraphPinExt
    {
        public static void Write(this BinaryWriter writer, UEdGraphPin item)
        {

        }

        public static void Read(this BinaryReader reader, ref List<UEdGraphPin> list, EPinResolveType type)
        {
            list ??= new();
            int count = reader.ReadInt32();//3 - 1
            for (int i = 0; i < count; i++)
            {
                list.Add(reader.Read(new UEdGraphPin(), type));
            }
            //83615
        }

        public static UEdGraphPin Read(this BinaryReader reader, ref UEdGraphPin item, EPinResolveType type)
        {
            item ??= new();
            return reader.Read(item, type);
        }

        [Location("bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)")]
        public static UEdGraphPin Read(this BinaryReader reader, UEdGraphPin item, EPinResolveType type)
        {
            reader.Read(ref item.bNullPtr);
            if (!item.bNullPtr.Value)
            {
                //bool UEdGraphPin::SerializePin(FArchive& Ar, UEdGraphPin*& PinRef, int32 ArrayIdx, UEdGraphPin* RequestingPin, EPinResolveType ResolveType, TArray<UEdGraphPin*>& OldPins)
                reader.Read(ref item.LocalOwningNode);//K2Node_CallFunction_1193
                reader.Read(ref item.PinGuid);

                if (type == EPinResolveType.OwningNode)
                {
                    //bool UEdGraphPin::Serialize(FArchive& Ar)
                    reader.Read(ref item.OwningNode);
                    reader.Read(ref item.PinId);
                    reader.Read(ref item.PinName);
                    reader.Read(ref item.PinFriendlyName);
                    reader.Read(ref item.SourceIndex);
                    reader.Read(ref item.PinToolTip);
                    reader.Read(ref item.Direction);

                    reader.Read(ref item.PinType);

                    reader.Read(ref item.DefaultValue);
                    reader.Read(ref item.AutogeneratedDefaultValue);
                    reader.Read(ref item.DefaultObject);
                    reader.Read(ref item.DefaultTextValue);

                    reader.Read(ref item.LinkedTo, EPinResolveType.LinkedTo);
                    reader.Read(ref item.SubPins, EPinResolveType.SubPins);

                    reader.Read(ref item.ParentPin, EPinResolveType.ParentPin);
                    reader.Read(ref item.ReferencePassThroughConnection, EPinResolveType.ReferencePassThroughConnection);

                    reader.Read(ref item.PersistentGuid);
                    reader.Read(ref item.BitField);
                }
            }
            return item;
        }
    }
}
